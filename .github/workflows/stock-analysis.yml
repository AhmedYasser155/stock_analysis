name: Stock Market Analysis

on:
  # Run on schedule - every 10 minutes during trading hours (10:00-14:15 Cairo time)
  schedule:
    # Cairo time is UTC+2, so 10:00-14:15 Cairo = 08:00-12:15 UTC
    # Run every 10 minutes during trading hours, Monday to Thursday
    - cron: '*/10 8-12 * * 1-4'
    # Additional runs for the last 15 minutes (12:00-12:15 UTC = 14:00-14:15 Cairo)
    - cron: '*/10 12 * * 1-4'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      run_duration:
        description: 'Run duration in minutes'
        required: false
        default: '10'
        type: string

  # Run on push to main branch for testing
  push:
    branches: [ main ]
    paths:
      - 'stock_analysis/**'
      - '.github/workflows/**'

env:
  # Set timezone to Cairo
  TZ: Africa/Cairo

jobs:
  stock-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd stock_analysis
        # Use GitHub Actions compatible requirements if available
        if [ -f requirements-github.txt ]; then
          pip install -r requirements-github.txt
        else
          pip install -r requirements.txt
        fi
        # Ensure telegram support
        pip install python-telegram-bot

    - name: Prepare environment
      run: |
        cd stock_analysis
        # Create necessary files if they don't exist
        touch notification_log.txt
        touch last_telegram_update.txt
        touch current_api_token.txt
        
        # Set permissions
        chmod 644 notification_log.txt
        chmod 644 last_telegram_update.txt
        chmod 644 current_api_token.txt

    - name: Check trading hours
      id: trading-hours
      run: |
        cd stock_analysis
        python3 << 'EOF'
        from datetime import datetime, time as dtime
        import os
        
        # Cairo timezone (UTC+2)
        now = datetime.now()
        current_time = now.time()
        current_day = now.weekday()  # 0=Monday, 6=Sunday
        
        # Trading hours: 10:00-14:15 Cairo time, Monday-Thursday (0-3)
        start_time = dtime(10, 0)
        end_time = dtime(14, 15)
        
        is_trading_day = current_day in [0, 1, 2, 3]  # Monday to Thursday
        is_trading_hours = start_time <= current_time <= end_time
        
        should_run = is_trading_day and is_trading_hours
        
        print(f"Current time: {current_time}")
        print(f"Trading day: {is_trading_day}")
        print(f"Trading hours: {is_trading_hours}")
        print(f"Should run: {should_run}")
        
        # Set output for GitHub Actions
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"should_run={str(should_run).lower()}\n")
            f.write(f"current_time={current_time}\n")
        EOF

    - name: Run stock analysis
      if: steps.trading-hours.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
      env:
        # Add your secrets here
        API_TOKEN: ${{ secrets.API_TOKEN }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        cd stock_analysis
        
        # Set API token if provided
        if [ -n "$API_TOKEN" ]; then
          echo "$API_TOKEN" > current_api_token.txt
        fi
        
        # Run the stock analysis
        timeout_duration="600"  # 10 minutes default
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.run_duration }}" ]; then
          timeout_duration=$((${{ github.event.inputs.run_duration }} * 60))
        fi
        
        echo "Running stock analysis for ${timeout_duration} seconds..."
        timeout ${timeout_duration} python price_depth.py || echo "Stock analysis completed or timed out"

    - name: Upload logs as artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: stock-analysis-logs-${{ github.run_number }}
        path: |
          stock_analysis/notification_log.txt
          stock_analysis/last_telegram_update.txt
        retention-days: 7

    - name: Generate summary report
      if: always()
      run: |
        cd stock_analysis
        echo "## Stock Analysis Summary - $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f notification_log.txt ]; then
          echo "### Latest Notifications" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          tail -20 notification_log.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Run Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Trading Hours Check**: ${{ steps.trading-hours.outputs.should_run }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Current Time**: ${{ steps.trading-hours.outputs.current_time }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY